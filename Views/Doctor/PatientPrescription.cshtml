@model IEnumerable<Ward_Management_System.Models.Appointment>

@{
    ViewData["Title"] = "My Patients";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}
@if (TempData["ToastMessage"] != null)
{
    var toastType = TempData["ToastType"] ?? "success";
    <div aria-live="polite" aria-atomic="true" class="position-relative">
        <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1080;">
            <div id="toastMessage" class="toast align-items-center text-bg-@toastType border-0 shadow" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="d-flex">
                    <div class="toast-body">
                        @TempData["ToastMessage"]
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            </div>
        </div>
    </div>
}
<div class="container-fluid patient-dashboard py-5">
    <div class="row justify-content-center mb-4 ">
        <div class="col-md-10 text-center">
            <h2 class="fw-bold text-primary">My Patients</h2>
            <p>Select Patient & Prescribe Medication</p>
        </div>
    </div>
    <!-- Filtering Options Row -->
    <div class="row justify-content-center align-items-center mb-4 gx-3">
        <!-- Gender Filter -->
        <div class="col-md-2">
            <select class="form-select" id="genderFilter">
                <option value="" disabled selected hidden>-- Select Gender --</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </select>
        </div>

        <!-- Age Group Filter -->
        <div class="col-md-2">
            <select class="form-select" id="ageFilter">
                <option value="" disabled selected hidden>-- Select Age Group --</option>
                <option value="young">Under 30</option>
                <option value="middle">30-50</option>
                <option value="senior">50+</option>
            </select>
        </div>


        <!-- Search Input -->
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text bg-white">
                    <i class="bi bi-search text-muted"></i>
                </span>
                <input type="text" class="form-control" id="patientSearch" placeholder="Search by name or ID number...">
                <button class="btn btn-outline-secondary" type="button" id="clearFilters">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>
        <!-- Export PDF Button -->
        <div class="col-md-2 text-end">
            <button class="btn btn-danger w-100 d-flex align-items-center justify-content-center" id="exportPDF">
                <i class="bi bi-file-earmark-pdf-fill me-2"></i> Export PDF
            </button>
        </div>


    </div>





    <div class="row">
        <div class="col-md-10 offset-md-1">
            <div class="card shadow-sm">
                @if (!Model.Any())
                {
                    <div class="alert alert-info">No patients found.</div>
                }
                else
                {
                    <div class="card-body">
                        <table class="table table-hover table-striped mb-0 align-middle" id="MyPatientsTable">
                            <thead class="table-primary">
                                <tr>
                                    <th>Full Name</th>
                                    <th>ID Number</th>
                                    <th>Age</th>
                                    <th>Gender</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var patient in Model)
                                {
                                    <tr>
                                        <td>@patient.FullName</td>
                                        <td>@patient.IdNumber</td>
                                        @{
                                            int calculatedAge = 0;
                                            if (!string.IsNullOrEmpty(patient.IdNumber) && patient.IdNumber.Length >= 6)
                                            {
                                                var yearPart = int.Parse(patient.IdNumber.Substring(0, 2));
                                                var monthPart = int.Parse(patient.IdNumber.Substring(2, 2));
                                                var dayPart = int.Parse(patient.IdNumber.Substring(4, 2));

                                                var currentYear = DateTime.Now.Year % 100;
                                                var century = (yearPart <= currentYear) ? 2000 : 1900;

                                                var birthDate = new DateTime(century + yearPart, monthPart, dayPart);
                                                calculatedAge = DateTime.Today.Year - birthDate.Year;
                                                if (birthDate.Date > DateTime.Today.AddYears(-calculatedAge)) calculatedAge--;
                                            }
                                        }
                                        <td>@calculatedAge</td>

                                        <td>@patient.Gender</td>
                                        <td>
                                            <a asp-action="Prescribe" asp-controller="Doctor" asp-route-id="@patient.AppointmentId" class="btn btn-sm btn-primary">
                                                <i class="bi bi-plus-circle"></i> Prescribe
                                            </a>
                                        </td>

                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
        <!-- Back Button -->
        <div class="text-center mt-4">
            <a asp-action="Index" asp-controller="Doctor" class="btn btn-secondary px-4">
                <i class="bi bi-arrow-left-circle me-1"></i> Back to Dashboard
            </a>
        </div>
    </div>
</div>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const toastEl = document.getElementById("toastMessage");
            if (toastEl) new bootstrap.Toast(toastEl).show();

            const searchInput = document.getElementById("patientSearch");
            const genderFilter = document.getElementById("genderFilter");
            const ageFilter = document.getElementById("ageFilter");
            const clearBtn = document.getElementById("clearFilters");
            const tableRows = document.querySelectorAll("#MyPatientsTable tbody tr");

            function applyFilters() {
                const searchValue = searchInput.value.toLowerCase();
                const selectedGender = genderFilter.value;
                const selectedAgeGroup = ageFilter.value;

                tableRows.forEach(row => {
                    const name = row.cells[0]?.textContent.toLowerCase() || "";
                    const id = row.cells[1]?.textContent.toLowerCase() || "";
                    const age = parseInt(row.cells[2]?.textContent.trim()) || 0;
                    const gender = row.cells[3]?.textContent.trim();

                    const matchesSearch = name.includes(searchValue) || id.includes(searchValue);
                    const matchesGender = !selectedGender || gender === selectedGender;

                    let matchesAge = true;
                    if (selectedAgeGroup === "young") matchesAge = age < 30;
                    else if (selectedAgeGroup === "middle") matchesAge = age >= 30 && age <= 50;
                    else if (selectedAgeGroup === "senior") matchesAge = age > 50;

                    row.style.display = (matchesSearch && matchesGender && matchesAge) ? "" : "none";
                });
            }

            searchInput.addEventListener("input", applyFilters);
            genderFilter.addEventListener("change", applyFilters);
            ageFilter.addEventListener("change", applyFilters);
            clearBtn.addEventListener("click", () => {
                searchInput.value = "";
                genderFilter.selectedIndex = 0;
                ageFilter.selectedIndex = 0;
                applyFilters();
            });

            // Export PDF
            document.getElementById("exportPDF").addEventListener("click", function () {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF();

                const table = document.getElementById("MyPatientsTable");

                const headers = [];
                table.querySelectorAll("thead tr th").forEach(th => {
                    if (th.textContent.trim() !== "Actions") {
                        headers.push(th.textContent.trim());
                    }
                });

                const bodyData = [];
                table.querySelectorAll("tbody tr").forEach(row => {
                    if (row.style.display !== "none") {
                        const rowData = [];
                        for (let i = 0; i < row.cells.length - 1; i++) {
                            rowData.push(row.cells[i].textContent.trim());
                        }
                        bodyData.push(rowData);
                    }
                });

                const logo = new Image();
                logo.src = '/images/logo.png';

                logo.onload = function () {
                    doc.addImage(logo, 'PNG', 14, 10, 30, 30);

                    doc.setFontSize(16);
                    doc.setTextColor(40);
                    doc.text("Patient Prescriptions Report", 105, 20, { align: "center" });

                    doc.setFontSize(10);
                    const now = new Date();
                    const timestamp = now.toLocaleString();
                    doc.text(`Generated: ${timestamp}`, 105, 28, { align: "center" });

                    let filtersText = "";
                    const gender = genderFilter.value;
                    const age = ageFilter.value;
                    const search = searchInput.value;
                    if (gender || age || search) {
                        filtersText = "Filters Applied: ";
                        if (gender) filtersText += `Gender = ${gender} `;
                        if (age) filtersText += `| Age = ${age} `;
                        if (search) filtersText += `| Search = "${search}"`;
                        doc.text(filtersText.trim(), 14, 40);
                    }

                    doc.autoTable({
                        head: [headers],
                        body: bodyData,
                        startY: filtersText ? 48 : 44,
                        styles: { fontSize: 10, cellPadding: 3 },
                        headStyles: { fillColor: [0, 0, 0], textColor: [255, 255, 255] },
                        theme: 'grid',
                        margin: { left: 14, right: 14 },
                        didDrawPage: function (data) {
                            const pageHeight = doc.internal.pageSize.getHeight();
                            doc.setFontSize(9);
                            doc.setTextColor(150);
                            doc.text('Generated by Ward Management System © 2025', doc.internal.pageSize.getWidth() / 2, pageHeight - 10, { align: "center" });
                        }
                    });

                    const finalY = doc.lastAutoTable.finalY + 10;
                    doc.setFontSize(11);
                    doc.text(`Total Patients: ${bodyData.length}`, 14, finalY);

                    doc.save("MyPatientsList.pdf");
                };

                logo.onerror = function () {
                    doc.setFontSize(16);
                    doc.setTextColor(40);
                    doc.text("Patient Prescriptions Report", 105, 20, { align: "center" });

                    doc.setFontSize(10);
                    const now = new Date();
                    const timestamp = now.toLocaleString();
                    doc.text(`Generated: ${timestamp}`, 105, 28, { align: "center" });

                    let filtersText = "";
                    const gender = genderFilter.value;
                    const age = ageFilter.value;
                    const search = searchInput.value;
                    if (gender || age || search) {
                        filtersText = "Filters Applied: ";
                        if (gender) filtersText += `Gender = ${gender} `;
                        if (age) filtersText += `| Age = ${age} `;
                        if (search) filtersText += `| Search = "${search}"`;
                        doc.text(filtersText.trim(), 14, 40);
                    }

                    doc.autoTable({
                        head: [headers],
                        body: bodyData,
                        startY: filtersText ? 48 : 44,
                        styles: { fontSize: 10, cellPadding: 3 },
                        headStyles: { fillColor: [0, 0, 0], textColor: [255, 255, 255] },
                        theme: 'grid',
                        margin: { left: 14, right: 14 },
                        didDrawPage: function (data) {
                            const pageHeight = doc.internal.pageSize.getHeight();
                            doc.setFontSize(9);
                            doc.setTextColor(150);
                            doc.text('Generated by Ward Management System © 2025', doc.internal.pageSize.getWidth() / 2, pageHeight - 10, { align: "center" });
                        }
                    });

                    const finalY = doc.lastAutoTable.finalY + 10;
                    doc.setFontSize(11);
                    doc.text(`Total Patients: ${bodyData.length}`, 14, finalY);

                    doc.save("MyPatientsList.pdf");
                };
            });
        });
    </script>
}

